// https://docs.spring.io/spring-boot/docs/2.7.9/reference/html/dependency-versions.html#dependency-versions
// https://docs.spring.io/spring-boot/docs/2.7.9/reference/htmlsingle
// https://docs.spring.io/spring-cloud/docs/2021.0.5/reference/html/
buildscript {
    ext {
        groupId = "io.github.syakuis"
        versionName = "1.0.0-SNAPSHOT"
        springBootVersion = "2.7.3"
        springCloudVersion = "2021.0.3"

        restDocsVersion = "2.0.6.RELEASE"
        snippetsDir = file("$buildDir/generated-snippets")

        junitVersion = "5.7.1"
        jacksonVersion = "2.11.4"
        kotlinVersion = "1.6.21"
        kotestVersion = "4.6.0"
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"

        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "io.kotest:kotest-gradle-plugin:0.3.8"
    }
}

wrapper {
    gradleVersion = "7.6"
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "kotlin-jpa"
apply plugin: "kotlin-kapt"
apply plugin: "application"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.asciidoctor.jvm.convert"
apply plugin: "org.sonarqube"
apply plugin: "jacoco"
apply plugin: "io.kotest"

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
}

repositories {
    mavenCentral()
}

group groupId
version versionName

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
}

compileJava.options.encoding = 'UTF-8'

configurations {
    implementation.exclude module: "spring-boot-starter-tomcat"
    asciidoctorExtensions
}

processResources {
    filesMatching('*.yml') {
        expand(project.properties)
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    asciidoctorExtensions "org.springframework.restdocs:spring-restdocs-asciidoctor:${restDocsVersion}"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${restDocsVersion}"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner"

    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${jacksonVersion}"

    testImplementation "com.h2database:h2:1.4.191"
    compileOnly "com.h2database:h2:1.4.191"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-test-junit5:${kotlinVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.4"

    testImplementation "io.kotest.extensions:kotest-extensions-spring:1.0.0"
    testImplementation "io.kotest:kotest-runner-junit5-jvm:${kotestVersion}"
    testImplementation "io.kotest:kotest-assertions-core-jvm:${kotestVersion}"
    testImplementation "io.kotest:kotest-property-jvm:${kotestVersion}"
}

asciidoctor {
    attributes "snippets": snippetsDir
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions'
    dependsOn test
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", ""
        property "sonar.projectKey", ""
        property "sonar.projectName", "spring-kotlin-gradle-template"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.exclusions", "**/*Test*.*, **/Q*.java"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.exclusions", "**/*Test*.*, **/Q*.java"
        property "sonar.java.junit.reportPaths", "${buildDir}/test-results"
        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/jacoco.exec"
    }
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperty 'spring.profiles.active', 'test'
}

application {
    mainClass = "${groupId}.ApplicationKt"
}

bootJar {
    enabled = true
    launchScript()
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into "BOOT-INF/classes/static/api-docs"
    }
}

jar {
    enabled false
}
